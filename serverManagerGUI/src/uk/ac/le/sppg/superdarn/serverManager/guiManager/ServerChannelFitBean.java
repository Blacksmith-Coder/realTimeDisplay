/*
 * ServerChannelTimeBean.java
 *
 * Created on 25 November 2004, 17:13
 */

package uk.ac.le.sppg.superdarn.serverManager.guiManager;

import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;

import javax.swing.JCheckBox;
import javax.swing.JPanel;

import uk.ac.le.sppg.superdarn.fitData.FitacfData;
import uk.ac.le.sppg.superdarn.fitDataBeans.FitDataBean;
/**
 *
 * @author  nigel
 */
public class ServerChannelFitBean extends javax.swing.JPanel {
    
    private static final long serialVersionUID = 0x525350504700003AL;
    
    /** Creates new form BeanForm */
    public ServerChannelFitBean() {
        initComponents();
        fitDisplayPanel.pack();
    }
    
    FitacfData fit = null;
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        fitDisplayPanel = new javax.swing.JDialog();
        label = new javax.swing.JLabel();
        timePanel = new javax.swing.JPanel();
        timeValue = new javax.swing.JButton();

        fitDisplayPanel.getContentPane().add(getJPanel());

        setLayout(new java.awt.GridBagLayout());

        label.setText("Channel");
        label.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 7, 0, 0);
        add(label, gridBagConstraints);

        timePanel.setLayout(new java.awt.GridBagLayout());

        timePanel.setFont(new java.awt.Font("Dialog", 0, 10));
        timeValue.setFont(new java.awt.Font("Dialog", 0, 12));
        timeValue.setText("No data");
        timeValue.setMargin(new java.awt.Insets(2, 2, 2, 2));
        timeValue.setEnabled(false);
        timeValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeValueActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        timePanel.add(timeValue, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        fitDisplayPanel.setContentPane(getJPanel());
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        add(timePanel, gridBagConstraints);

    }//GEN-END:initComponents
    
    private void timeValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeValueActionPerformed
        fitDisplayPanel.setVisible(true);
    }//GEN-LAST:event_timeValueActionPerformed
    
    
    private javax.swing.JDialog fitDisplayPanel;  //  @jve:decl-index=0:visual-constraint="10,45"
    private javax.swing.JLabel label;
    private javax.swing.JPanel timePanel;
    private javax.swing.JButton timeValue;
    private JPanel jPanel = null;
    private JCheckBox updateCheck = null;
    private FitDataBean netFitBean = null;
    // End of variables declaration
    
    public void setLabel(String value) {
        label.setText(value);
    }
    public String getLabel() {
        return label.toString();
    }
    public void showLabel(boolean visible) {
        label.setVisible(visible);
    }
    
    public void setFit(FitacfData fit) {
        this.fit = fit;
        if ( fit == null ) {
            timeValue.setText("No data");
        } else {
            timeValue.setText(fit.radarParms.date.toString());
        }
        
        if ( ! updateCheck.isSelected() && fit != null ) {
            netFitBean.setData(fit);
        }
    }
    
    public void setEnabled(boolean enabled) {
        label.setEnabled(enabled);
        timeValue.setEnabled(enabled);
    }
    
    public void addActionListener(ActionListener l) {
        timeValue.addActionListener(l);
    }
    
    public void setDataTitle(String title) {
        fitDisplayPanel.setTitle(title);
    }
    /**
     * This method initializes jPanel
     *
     * @return javax.swing.JPanel
     */
    private JPanel getJPanel() {
        if (jPanel == null) {
            jPanel = new JPanel();
            jPanel.setLayout(new BorderLayout());
            jPanel.add(getUpdateCheck(), java.awt.BorderLayout.NORTH);
            jPanel.add(getNetFitBean(), java.awt.BorderLayout.CENTER);
        }
        return jPanel;
    }
    /**
     * This method initializes jCheckBox
     *
     * @return javax.swing.JCheckBox
     */
    private JCheckBox getUpdateCheck() {
        if (updateCheck == null) {
            updateCheck = new JCheckBox();
            updateCheck.setText("Disable update");
            updateCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            updateCheck.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(ItemEvent e) {
                    if ( e.getStateChange() == ItemEvent.DESELECTED ) {
                        netFitBean.setData(fit);
                    }
                }
            });
        }
        return updateCheck;
    }
    /**
     * This method initializes netFitBean
     *
     * @return fitDataViewers.NetFitBean
     */
    private FitDataBean getNetFitBean() {
        if (netFitBean == null) {
            netFitBean = new FitDataBean();
        }
        return netFitBean;
    }
}
