/*
 * ServeBean.java
 *
 * Created on 18 November 2004, 10:57
 */

package uk.ac.le.sppg.superdarn.serverManager.guiManager;

import java.awt.Container;
import java.awt.GridBagConstraints;
import java.awt.Window;
import java.awt.event.ActionListener;
import java.rmi.RemoteException;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import org.apache.log4j.Level;
import uk.ac.le.sppg.superdarn.fitData.FitacfData;
import uk.ac.le.sppg.superdarn.rmiServer.rmilogger.RmiLoggerInterface;
import uk.ac.le.sppg.superdarn.rmiServer.server.RmiServerInterface;
import uk.ac.le.sppg.superdarn.fitData.ChannelId;



/**
 *
 * @author  nigel
 */
public class ServerBean extends javax.swing.JPanel {
    
    private static final long serialVersionUID = 0x525350504700003CL;
    
    /** Creates new form BeanForm */
    String site;
    
    RmiServerInterface rmi;
    
    HashMap<ChannelId,ServerChannelFitBean> earliestChannelFitBeans = new HashMap<ChannelId,ServerChannelFitBean>();
    HashMap<ChannelId,ServerChannelFitBean> latestChannelFitBeans = new HashMap<ChannelId,ServerChannelFitBean>();
    
    public ServerBean(String site, ChannelId[] channels, RmiServerInterface rmi) {
        this.site = site;
        this.rmi = rmi;
        
        initComponents();
        //((TitledBorder)getBorder()).setTitle(site);
        
        startTime.setText(new Date().toString());
        channelControl.setName(site);
        
        for(int i=0; i<channels.length; i++) {
            addChannel(channels[i]);
        }
    }

    public ServerBean(String site, RmiServerInterface rmi) {
        this.site = site;
        this.rmi = rmi;

        initComponents();
        
        startTime.setText(new Date().toString());
        channelControl.setName(site);
        
    }
    
    public void addChannel(ChannelId channel) {
        GridBagConstraints c = new GridBagConstraints();
        
        ServerChannelFitBean fitBean = new ServerChannelFitBean();
        fitBean.setLabel("Channel "+channel);
        if ( channel.equals("")) {
            fitBean.showLabel(false);
            fitBean.setDataTitle(site+": earliest data");
        }
        else {
            fitBean.setDataTitle(site+" Channel "+channel+": earliest data");
        }
        earliestChannelFitBeans.put(channel, fitBean);
        
        int count = earliestDataPanel.getComponentCount();
        c.gridx = 0;
        c.gridy = count;
        c.weightx = 0.1;
        c.weighty = 0.1;
        c.anchor = GridBagConstraints.FIRST_LINE_START;
        
        earliestDataPanel.add(fitBean, c);
        
        fitBean = new ServerChannelFitBean();
        fitBean.setLabel("Channel "+channel);
        latestChannelFitBeans.put(channel, fitBean);
        if ( channel.equals("")) {
            fitBean.showLabel(false);
            fitBean.setDataTitle(site+": latest data");
        }
        else {
            fitBean.setDataTitle(site+" Channel "+channel+": latest data");
        }
        latestDataPanel.add(fitBean, c);
        
        Container parent = this;
        do {
            parent = parent.getParent();
        } while(parent != null && ! (parent instanceof Window) );
        
        if ( parent != null ) {
            ((Window) parent).pack();
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        statusPanel = new javax.swing.JPanel();
        statusLabelLabel = new javax.swing.JLabel();
        statusDisplayPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        startPanel = new javax.swing.JPanel();
        startTimeLabel = new javax.swing.JLabel();
        startTime = new javax.swing.JLabel();
        logPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        serverLogLevel = new JComboBox(RmiLoggerInterface.levels);
        dataPanel = new javax.swing.JTabbedPane();
        latestDataPanel = new javax.swing.JPanel();
        earliestDataPanel = new javax.swing.JPanel();
        channelControl = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        statusPanel.setLayout(new java.awt.GridBagLayout());

        statusLabelLabel.setText("Status:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        statusPanel.add(statusLabelLabel, gridBagConstraints);

        statusDisplayPanel.setLayout(new java.awt.GridBagLayout());

        statusDisplayPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        statusLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        statusLabel.setText("Not running");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        statusDisplayPanel.add(statusLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        statusPanel.add(statusDisplayPanel, gridBagConstraints);

        startPanel.setLayout(new java.awt.GridBagLayout());

        startTimeLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        startTimeLabel.setText("since: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        startPanel.add(startTimeLabel, gridBagConstraints);

        startTime.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        startPanel.add(startTime, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        statusPanel.add(startPanel, gridBagConstraints);

        jLabel4.setText("Log level: ");
        logPanel.add(jLabel4);

        serverLogLevel.setEnabled(false);
        serverLogLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverLogLevelActionPerformed(evt);
            }
        });

        logPanel.add(serverLogLevel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        statusPanel.add(logPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        add(statusPanel, gridBagConstraints);

        dataPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        latestDataPanel.setLayout(new java.awt.GridBagLayout());

        latestDataPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        dataPanel.addTab("Latest data", latestDataPanel);

        earliestDataPanel.setLayout(new java.awt.GridBagLayout());

        earliestDataPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        dataPanel.addTab("Earliest data", earliestDataPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        add(dataPanel, gridBagConstraints);

        channelControl.setText("Start");
        channelControl.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 5, 0);
        add(channelControl, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void serverLogLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverLogLevelActionPerformed
        JComboBox b = (JComboBox) evt.getSource();
        Level l = (Level) b.getSelectedItem();
        
        try {
            if ( rmi != null ) 
                rmi.setLogLevel(l);
        }
        catch(RemoteException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error setting log level for server "+site,
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_serverLogLevelActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton channelControl;
    private javax.swing.JTabbedPane dataPanel;
    private javax.swing.JPanel earliestDataPanel;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel latestDataPanel;
    private javax.swing.JPanel logPanel;
    private javax.swing.JComboBox serverLogLevel;
    private javax.swing.JPanel startPanel;
    private javax.swing.JLabel startTime;
    private javax.swing.JLabel startTimeLabel;
    private javax.swing.JPanel statusDisplayPanel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel statusLabelLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    
    
    public void setLatestData(ChannelId channel, FitacfData fit) {
        ServerChannelFitBean bean = (ServerChannelFitBean) latestChannelFitBeans.get(channel);
        if ( bean == null ) {
            addChannel(channel);
            bean = (ServerChannelFitBean) latestChannelFitBeans.get(channel);
            if ( bean == null ) {
                return;
            }
            //bean.setEnabled(true);
        }
        
        bean.setFit(fit);
    }

    public void setEarliestData(ChannelId channel, FitacfData fit) {
        ServerChannelFitBean bean = (ServerChannelFitBean) earliestChannelFitBeans.get(channel);
        if ( bean == null ) {
            addChannel(channel);
            bean = (ServerChannelFitBean) earliestChannelFitBeans.get(channel);
            if ( bean == null ) {
                return;
            }
            //bean.setEnabled(true);
        }
        
        bean.setFit(fit);
    }

    
    
    public void setStatusText(String text) {
        statusLabel.setText(text);
    }
    
    public void setLabelEnabled(boolean enabled) {
        statusLabelLabel.setEnabled(enabled);
    }
    public void setStatusEnabled(boolean enabled) {
        statusLabel.setEnabled(enabled);
    }

    public void setLatestEnabled(ChannelId channel, boolean enabled) {
        ServerChannelFitBean bean = (ServerChannelFitBean) latestChannelFitBeans.get(channel);
        if ( bean != null ) {
            bean.setEnabled(enabled);
        }
    }
    public void setLatestEnabled(boolean enabled) {
        for(Iterator i=latestChannelFitBeans.values().iterator(); i.hasNext();) {
            ServerChannelFitBean bean = (ServerChannelFitBean) i.next();
            bean.setEnabled(enabled);
        }
    }
    
    public void setEarliestEnabled(ChannelId channel, boolean enabled) {
        ServerChannelFitBean bean = (ServerChannelFitBean) earliestChannelFitBeans.get(channel);
        if ( bean != null ) {
            bean.setEnabled(enabled);
        }
    }
    public void setEarliestEnabled(boolean enabled) {
        for(Iterator i=earliestChannelFitBeans.values().iterator(); i.hasNext();) {
            ServerChannelFitBean bean = (ServerChannelFitBean) i.next();
            bean.setEnabled(enabled);
        }
    }

    
    public void setControlEnabled(boolean enabled) {
        channelControl.setEnabled(enabled);
    }
    public void setControlText(String text) {
        channelControl.setText(text);
    }
    
    public String getSite() {
        return site;
    }
    
    public void addActionListener(ActionListener listener) {
        channelControl.addActionListener(listener);
    }
    public void removeActionListener(ActionListener listener) {
        channelControl.removeActionListener(listener);
    }
    
    public void enableStartTime(boolean show) {
        startTime.setVisible(show);
        startTimeLabel.setVisible(show);
    }
    public void setStartTime(Date start) {
        startTime.setText(start.toString());
    }
    
    public void setServer(RmiServerInterface rmi) {
        this.rmi = rmi;
    }
    
    public void setLogLevelEnabled(boolean enabled) {
        serverLogLevel.setEnabled(enabled);
    }

    public void showServerLogLevel(Level level) {
        
        if ( serverLogLevel.getSelectedItem() == null || 
                ! ((Level)serverLogLevel.getSelectedItem()).equals(level)) {
            serverLogLevel.setSelectedItem(level);
        }

    }
}
