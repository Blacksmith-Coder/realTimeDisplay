/*
 * NetFitBean.java
 *
 * Created on 22 July 2003, 14:23
 */
package uk.ac.le.sppg.superdarn.fitDataBeans;

import java.awt.Component;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.util.TimeZone;

import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

import uk.ac.le.sppg.superdarn.fitData.FitData;
import uk.ac.le.sppg.superdarn.fitData.FitacfData;
import uk.ac.le.sppg.superdarn.fitData.NetFitData;
import uk.ac.le.sppg.superdarn.fitData.RadarParms2;

/**
 *
 * @author  nigel
 */
public class FitDataBean
        extends JPanel {

  private static final long serialVersionUID = 0x525350504700002AL;
  private FontMetrics metrics;
  private DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);
  // date/time format for the dateField
  // currently LONG format for locale GMT

  /** Creates new form BeanForm */
  public FitDataBean() {
    initComponents();
    dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));

    TableColumn column = parmsTable.getColumnModel().getColumn(0);
    column.setPreferredWidth(20);
    column = parmsTable.getColumnModel().getColumn(2);
    column.setPreferredWidth(20);

    dataTable.setDefaultRenderer(FitDataValue.class, new ValueRenderer());

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        dateField = new javax.swing.JTextField();
        cpidField = new javax.swing.JTextField();
        beamField = new javax.swing.JTextField();
        dataPane = new javax.swing.JTabbedPane();
        parmsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        parmsTable = new javax.swing.JTable();
        dataPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        dateField.setColumns(20);
        dateField.setEditable(false);
        dateField.setToolTipText("Date of data");
        dateField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        topPanel.add(dateField);

        cpidField.setColumns(5);
        cpidField.setEditable(false);
        cpidField.setToolTipText("CPID");
        cpidField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        topPanel.add(cpidField);

        beamField.setColumns(3);
        beamField.setEditable(false);
        beamField.setToolTipText("Beam number");
        beamField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        topPanel.add(beamField);

        add(topPanel, java.awt.BorderLayout.NORTH);

        parmsPanel.setLayout(new java.awt.BorderLayout());

        parmsTable.setModel(new ParmsDataModel());
        jScrollPane1.setViewportView(parmsTable);

        parmsPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        dataPane.addTab("Radar parms", null, parmsPanel, "Radar parameters");

        dataPanel.setLayout(new java.awt.BorderLayout());

        dataTable.setModel(new RangeDataModel());
        jScrollPane2.setViewportView(dataTable);

        dataPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        dataPane.addTab("Data", null, dataPanel, "Data");

        add(dataPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField beamField;
    private javax.swing.JTextField cpidField;
    private javax.swing.JTabbedPane dataPane;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JTable dataTable;
    private javax.swing.JTextField dateField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel parmsPanel;
    private javax.swing.JTable parmsTable;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables

  public void setData(NetFitData data) {
    RadarParms2 parms2 = new RadarParms2(data.radarParms);
    displayParms(parms2);

    RangeDataModel dataModel = (RangeDataModel) dataTable.getModel();

    dataModel.setData(data);
  }

  public void setData(FitData data) {
    RadarParms2 parms2 = new RadarParms2(data.radarParms);
    displayParms(parms2);

    RangeDataModel dataModel = (RangeDataModel) dataTable.getModel();

    dataModel.setData(data);

  }

  public void setData(FitacfData data) {
    displayParms(data.radarParms);

    RangeDataModel dataModel = (RangeDataModel) dataTable.getModel();

    dataModel.setData(data);

  }

  private void displayParms(RadarParms2 parms) {
    ParmsDataModel parmsModel = (ParmsDataModel) parmsTable.getModel();
    if (metrics == null) {
      Graphics graphics = this.getGraphics();
      if (graphics != null) {
        metrics = graphics.getFontMetrics();

        for (int col = 0; col < 3; col += 2) {
          String str = parmsModel.getColumnName(col);
          int width = metrics.stringWidth(str);
          int maxWidth = width;

          for (int i = 0; i < parmsModel.getRowCount(); i++) {
            str = (String) parmsModel.getValueAt(i, col);
            if (str != null) {
              width = metrics.stringWidth(str);
              maxWidth = Math.max(width, maxWidth);
            }
          }

          TableColumn column = parmsTable.getColumnModel().getColumn(col);
          column.setPreferredWidth(maxWidth);

        }
      }
    }

    parmsModel.setData(parms);

    // set the values of the textFields
    String str = dateFormat.format(parms.date);
    dateField.setText(str);

    cpidField.setText(String.valueOf(parms.controlProgramId));
    beamField.setText(String.valueOf(parms.beamNumber));
  }

  public void clear() {
    // set the values of the textFields
    dateField.setText("");

    cpidField.setText("");
    beamField.setText("");

    ParmsDataModel model = (ParmsDataModel) parmsTable.getModel();
    model.clear();

  }

  // renderer for characters to get them right-aligned.
  // also renders the '\0' character as <null>
  private class ValueRenderer extends DefaultTableCellRenderer {

    private static final long serialVersionUID = 0x525350504700002EL;

    ValueRenderer() {
      super();
      setHorizontalAlignment(RIGHT);
    }
    DecimalFormat formatter = new DecimalFormat("#0.0");

    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
            boolean hasFocus, int row, int column) {

      Component c = super.getTableCellRendererComponent(table, value, isSelected,
              hasFocus, row, column);
      Object gs = table.getValueAt(row, 2);
      String str = formatter.format(value);
      setValue(str);

      boolean b = ((Boolean) gs).booleanValue();

      c.setEnabled(!b);
//                if ( b ) {
//                    c.setBackground( table.getForeground() );
//                    c.setForeground( table.getBackground() );
//                }
//                else {
//                    c.setBackground( table.getBackground() );
//                    c.setForeground( table.getForeground() );
//                }

      return c;
    }
  }
}
