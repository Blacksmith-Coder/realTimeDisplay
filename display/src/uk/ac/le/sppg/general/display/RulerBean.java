/*
 * RulerBean.java
 *
 * Created on 18 May 2005, 10:52
 */

package uk.ac.le.sppg.general.display;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.Icon;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SpinnerNumberModel;
import javax.swing.plaf.basic.BasicInternalFrameTitlePane;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 *
 * @author  nigel
 */
public class RulerBean extends javax.swing.JInternalFrame {

    private static final long serialVersionUID = 0x525350504700001DL;

    /**
     * Holds value of property colour.
     */
    private Color colour1;
    private Color colour2;
    
    float opacity = 1.0f;
    int divisions = 1;
    
    JComponent northPane;
              
    /** Creates new form BeanForm */
    public RulerBean() {
        resizable = true;
        
        colour1 = Color.WHITE;
        colour2 = Color.BLACK;
        
        super.setResizable(true);
        setFrameIcon(new FrameIcon());
        super.setFrameIcon(new FrameIcon());

        initComponents();
                
        dialogFrame.pack();
        colourFrame.pack();
        
        setDivisions(6);
        setOpaque(false);
        setOpacity(0.5f);
               
        this.setUI(new TitlelessInternalFrameUI(this));
        
        northPane = ((BasicInternalFrameUI) this.getUI()).getNorthPane();

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        dialogFrame = new javax.swing.JFrame();
        divisionsPanel = new javax.swing.JPanel();
        divisionSpinner = new javax.swing.JSpinner();
        opacityPanel = new javax.swing.JPanel();
        opaqueCheckbox = new javax.swing.JCheckBox();
        opacitySlider = new javax.swing.JSlider();
        colourPanel = new javax.swing.JPanel();
        colour1Button = new javax.swing.JButton();
        colour2Button = new javax.swing.JButton();
        colourFrame = new javax.swing.JFrame();
        colourChooser = new javax.swing.JColorChooser();
        setColourButton = new javax.swing.JButton();

        dialogFrame.setTitle("Ruler settings");
        divisionsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        divisionsPanel.setBorder(new javax.swing.border.TitledBorder("Divisions"));
        divisionSpinner.setToolTipText("Set the number of divisions");
        divisionSpinner.setModel(new SpinnerNumberModel(1, 1, 50, 1));
        divisionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                divisionSpinnerStateChanged(evt);
            }
        });

        divisionsPanel.add(divisionSpinner);

        dialogFrame.getContentPane().add(divisionsPanel, java.awt.BorderLayout.NORTH);

        opacityPanel.setLayout(new java.awt.BorderLayout());

        opacityPanel.setBorder(new javax.swing.border.TitledBorder("Opacity"));
        opaqueCheckbox.setText("Opaque");
        opaqueCheckbox.setToolTipText("Toggle the rulers opaqueness");
        opaqueCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opaqueCheckboxActionPerformed(evt);
            }
        });

        opacityPanel.add(opaqueCheckbox, java.awt.BorderLayout.WEST);

        opacitySlider.setFont(new java.awt.Font("Dialog", 0, 8));
        opacitySlider.setMajorTickSpacing(25);
        opacitySlider.setMinorTickSpacing(5);
        opacitySlider.setPaintLabels(true);
        opacitySlider.setPaintTicks(true);
        opacitySlider.setToolTipText("Set the level of opacity");
        opacitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                opacitySliderStateChanged(evt);
            }
        });

        opacityPanel.add(opacitySlider, java.awt.BorderLayout.CENTER);

        dialogFrame.getContentPane().add(opacityPanel, java.awt.BorderLayout.CENTER);

        colourPanel.setBorder(new javax.swing.border.TitledBorder("Colour"));
        colour1Button.setText("Band 1");
        colour1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colour1ButtonActionPerformed(evt);
            }
        });

        colourPanel.add(colour1Button);

        colour2Button.setText("Band 2");
        colour2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colour2ButtonActionPerformed(evt);
            }
        });

        colourPanel.add(colour2Button);

        dialogFrame.getContentPane().add(colourPanel, java.awt.BorderLayout.SOUTH);

        colourFrame.getContentPane().add(colourChooser, java.awt.BorderLayout.CENTER);

        setColourButton.setText("Set colour");
        setColourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setColourButtonActionPerformed(evt);
            }
        });

        colourFrame.getContentPane().add(setColourButton, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

    private void setColourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setColourButtonActionPerformed
        Color colour = colourChooser.getColor();
        if ( setColourButton.getText().endsWith("1")) {
            setColour1(colour);
        }
        else if ( setColourButton.getText().endsWith("2")) {
            setColour2(colour);
        }
    }//GEN-LAST:event_setColourButtonActionPerformed

    private void colour2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colour2ButtonActionPerformed
        setColourButton.setText("Set colour for band 2");
        colourFrame.setVisible(true);
    }//GEN-LAST:event_colour2ButtonActionPerformed

    private void colour1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colour1ButtonActionPerformed
        setColourButton.setText("Set colour for band 1");
        colourFrame.setVisible(true);
    }//GEN-LAST:event_colour1ButtonActionPerformed

    private void opaqueCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opaqueCheckboxActionPerformed
        setOpaque(opaqueCheckbox.isSelected());
    }//GEN-LAST:event_opaqueCheckboxActionPerformed

    private void opacitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_opacitySliderStateChanged
        setOpacity(opacitySlider.getValue()/100.0f);
    }//GEN-LAST:event_opacitySliderStateChanged

    private void divisionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_divisionSpinnerStateChanged
        setDivisions(((SpinnerNumberModel)divisionSpinner.getModel()).getNumber().intValue());
    }//GEN-LAST:event_divisionSpinnerStateChanged

    private void internalSetDivisions(int divisions) {
        this.divisions = divisions;
        if ( northPane != null ) 
            northPane.repaint();
    }
    
    private void internalSetOpaque(boolean opaque) {
        super.setOpaque(opaque);
        if ( northPane != null )
            northPane.repaint();
    }
    
    private void internalSetOpacity(float opacity) {
        this.opacity = opacity;
        if ( northPane != null ) 
            northPane.repaint();
    }
    
            
    private void fixSize() {
        
        Dimension size = getSize();
        Insets insets = getInsets();
        Dimension titleSize = northPane.getSize();
        
        if ( size.height > titleSize.height+insets.top+insets.bottom) {
            this.setSize(size.width, titleSize.height+insets.top+insets.bottom);
        }       
    }


    public void paintComponent(Graphics g) {
        fixSize();
        super.paintComponent(g);
    }

    
    
    /**
     * Getter for property divisions.
     * @return Value of property divisions.
     */
    public int getDivisions() {

        return ((SpinnerNumberModel) divisionSpinner.getModel()).getNumber().intValue();
    }

    /**
     * Setter for property divisions.
     * @param divisions New value of property divisions.
     */
    public void setDivisions(int divisions) {
//        internalSetDivisions(divisions);
        divisionSpinner.setValue(new Integer(divisions));
        internalSetDivisions(divisions);
    }
    

    /**
     * Setter for property resizable.
     * @param resizable New value of property resizable.
     */
    public void setResizable(boolean resizable) {

        super.setResizable(resizable);
    }

    /**
     * Getter for property opacity.
     * @return Value of property opacity.
     */
    public float getOpacity() {
        return opacitySlider.getValue()/100.0f;
    }

    /**
     * Setter for property opacity.
     * @param opacity New value of property opacity.
     */
    public void setOpacity(float opacity) {
        opacitySlider.setValue((int)(opacity*100));
        internalSetOpacity(opacity);
    }

    /**
     * Getter for property colour1.
     * @return Value of property colour1.
     */
    public Color getColour1() {

        return this.colour1;
    }

    /**
     * Setter for property colour1.
     * @param colour New value of property colour1.
     */
    public void setColour1(Color colour) {

        this.colour1 = colour;
        if ( northPane != null ) 
            northPane.repaint();
    }

    /**
     * Getter for property opaque.
     * @return Value of property opaque.
     */
    public boolean isOpaque() {

        return opaqueCheckbox.isSelected();
    }

    /**
     * Setter for property opaque.
     * @param opaque New value of property opaque.
     */
    public void setOpaque(boolean opaque) {
        internalSetOpaque(opaque);
    }

    /**
     * Getter for property colour2.
     * @return Value of property colour2.
     */
    public Color getColour2() {
        return this.colour2;
    }

    /**
     * Setter for property colour2.
     * @param colour2 New value of property colour2.
     */
    public void setColour2(Color colour) {
        colour2 = colour;
        if ( northPane != null )
            northPane.repaint();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton colour1Button;
    private javax.swing.JButton colour2Button;
    private javax.swing.JColorChooser colourChooser;
    private javax.swing.JFrame colourFrame;
    private javax.swing.JPanel colourPanel;
    private javax.swing.JFrame dialogFrame;
    private javax.swing.JSpinner divisionSpinner;
    private javax.swing.JPanel divisionsPanel;
    private javax.swing.JPanel opacityPanel;
    private javax.swing.JSlider opacitySlider;
    private javax.swing.JCheckBox opaqueCheckbox;
    private javax.swing.JButton setColourButton;
    // End of variables declaration//GEN-END:variables

    private class TitlelessInternalFrameTitlePane 
            extends BasicInternalFrameTitlePane
            implements ActionListener 
    {
        private static final long serialVersionUID = 0x525350504700001EL;

        JInternalFrame f;
        private JPopupMenu popup;
        
        public TitlelessInternalFrameTitlePane(JInternalFrame f) {
            super(f);
            frame = f;
            //Add listener to components that can bring up popup menus.
            PopupListener popupListener = new PopupListener();
            this.addMouseListener(popupListener);
            addMenu();
        }
        
        // the background popup menu allows varioius parts of the plot
        // to be toggled on and off.
        private void addMenu() {

            popup = new JPopupMenu();

            JMenuItem menuItem = new JMenuItem("Options...");
            menuItem.setActionCommand("options");
            menuItem.addActionListener(this);
            
            JMenuItem menuItem2 = new JMenuItem("Close");
            menuItem2.setActionCommand("close");
            menuItem2.addActionListener(this);

            popup.add(menuItem);
            popup.add(menuItem2);

        }
        
        // listener for double-click to post the dialog box

        class PopupListener extends MouseAdapter {
            public void mousePressed(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) {
                    if (e.getClickCount() == 2) {
                        dialogFrame.setVisible(true);
                        dialogFrame.toFront();
                    }
                }
                else {
                    maybeShowPopup(e);
                }
            }
            public void mouseReleased(MouseEvent e) {
                maybeShowPopup(e);
            }
            private void maybeShowPopup(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    int mouseX = e.getX();
                    int mouseY = e.getY();

                    // create the frequency list sub-menu

                    popup.show(e.getComponent(), mouseX, mouseY);
                }
            }
        }
        
        public void actionPerformed(ActionEvent e) {
            String ac = e.getActionCommand();

            if (ac.equals("options")) {
                dialogFrame.setVisible(true);
                dialogFrame.toFront();
            }
            else if (ac.equals("close")) {
                dialogFrame.setVisible(false);
                colourFrame.setVisible(false);
                RulerBean.this.setVisible(false);
            }
        }
        
        public void paintComponent(Graphics g) {
            Graphics2D g2d = (Graphics2D) g.create();
            
            Insets insets = getInsets();
            float drawX = insets.left;
            int width = getWidth() - insets.left - insets.right;
            int drawHeight = getHeight() - insets.top - insets.bottom;
            float drawWidth = (float)width / divisions;
            
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, opacity));
            
            Color colour = colour1;
            
            while(drawX < width && drawWidth > 1) {
                g2d.setColor(colour);
                g2d.fillRect((int)drawX, insets.bottom, (int)drawWidth, drawHeight-1);
                g2d.setColor(Color.BLACK);
//                g2d.drawLine(
                drawX += drawWidth;
                if ( colour == colour1 ) {
                    colour = colour2;
                }
                else {
                    colour = colour1;
                }
            }
            
            g2d.dispose();
        }
    }
    
    private class TitlelessInternalFrameUI extends BasicInternalFrameUI {
        JInternalFrame frame;
        public TitlelessInternalFrameUI(JInternalFrame f) {
            super(f);
            frame = f;
        }
        
        protected JComponent createNorthPane(JInternalFrame frame) {
            return new TitlelessInternalFrameTitlePane(frame);
        }
    }

    private class FrameIcon implements Icon {
        public int getIconHeight() {
            return 1;
        }
        
        public int getIconWidth() {
            return 1;
        }
        
        public void paintIcon(Component c, Graphics g, int x, int y) {
            return;
        }
    }
}
