/*
 * FreqSelector.java
 *
 * Created on 02 December 2004, 11:23
 */

package uk.ac.le.sppg.superdarn.dataDisplay.timeWindow;

import uk.ac.le.sppg.coords.Site;
import uk.ac.le.sppg.coords.superdarn.FrequencyBand;
import uk.ac.le.sppg.coords.superdarn.SuperDarnBandSite;
import java.awt.event.ActionListener;
import java.lang.reflect.InvocationTargetException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.TreeMap;

import javax.swing.JCheckBox;
import javax.swing.SwingUtilities;


/**
 *
 * @author  nigel
 */
public class FreqSelector extends javax.swing.JDialog {
    private static final long serialVersionUID = 0x525350504700003FL;
    
    static DecimalFormat freqFormatter = new DecimalFormat("#.000 Mhz"); 

    ArrayList<SelectionFrequencyBand> bands = new ArrayList<SelectionFrequencyBand>();
    TreeMap<Integer, FrequencyEntry> frequencies = new TreeMap<Integer, FrequencyEntry>();
    ActionListener redrawListener;
    
    FreqSelector threadLock;
    
    /** Creates new form FreqSelector */
    public FreqSelector(ActionListener l) {
        redrawListener = l;
        threadLock = this;
        initComponents();
    }

    private class SelectionFrequencyBand {
        int count;
        JCheckBox checkBox = null;
        int band;
        int start;
        int stop;

        public SelectionFrequencyBand(int band, int start, int stop) 
        throws InterruptedException, InvocationTargetException {
            this.band = band;
            this.start = start;
            this.stop = stop;
        }
        
        void createCheckBox() {
            StringBuffer label = new StringBuffer(String.valueOf(band));
            label.append(" ("+start+"-"+stop+")");
            checkBox = new JCheckBox(label.toString());
        }
        
        public void increment() {
            count++;
        }
        public void decrement() {
            if ( count > 0 ) {
                count--;
            }
        }
        public int getCount() {
            return count;
        }
        public JCheckBox getBox() {
            return checkBox;
        }
    }
    private class FrequencyEntry {
        int count;
        JCheckBox checkBox = null;
        short freq;
        
        public FrequencyEntry(short freq) 
        throws InterruptedException, InvocationTargetException {
            count = 0;
            this.freq = freq;
        }
        
        private void createCheckBox() {
            double freqMhz = freq / 1000.0;
            String label = freqFormatter.format(freqMhz);
            checkBox = new JCheckBox(label.toString());
        }

        public void increment() {
            count++;
        }
        public void decrement() {
            if ( count > 0 ) {
                count--;
            }
        }
        public int getCount() {
            return count;
        }
        public JCheckBox getBox() {
            return checkBox;
        }
    }
    
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        tabPane = new javax.swing.JTabbedPane();
        freqPane = new javax.swing.JScrollPane();
        freqCheckPanel = new javax.swing.JPanel();
        bandPane = new javax.swing.JScrollPane();
        bandCheckPanel = new javax.swing.JPanel();
        panel3 = new javax.swing.JPanel();
        selectPanel = new javax.swing.JPanel();
        selectButton = new javax.swing.JButton();
        deselectButton = new javax.swing.JButton();
        beamTimePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        timeField = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        controlButtonPanel = new javax.swing.JPanel();
        plotButton = new javax.swing.JButton();
        plotButton.addActionListener(redrawListener);
        closeButton = new javax.swing.JButton();

        setTitle("Restrict displayed frequencies");
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        tabPane.setPreferredSize(new java.awt.Dimension(150, 200));
        freqCheckPanel.setLayout(new javax.swing.BoxLayout(freqCheckPanel, javax.swing.BoxLayout.Y_AXIS));

        freqCheckPanel.setBorder(new javax.swing.border.EtchedBorder());
        freqPane.setViewportView(freqCheckPanel);

        tabPane.addTab("Frequencies", freqPane);

        bandCheckPanel.setLayout(new javax.swing.BoxLayout(bandCheckPanel, javax.swing.BoxLayout.Y_AXIS));

        bandPane.setViewportView(bandCheckPanel);

        tabPane.addTab("Bands", bandPane);

        getContentPane().add(tabPane, java.awt.BorderLayout.CENTER);

        panel3.setLayout(new java.awt.GridBagLayout());

        selectButton.setText("Select all");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        selectPanel.add(selectButton);

        deselectButton.setText("Deselect all");
        deselectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectButtonActionPerformed(evt);
            }
        });

        selectPanel.add(deselectButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panel3.add(selectPanel, gridBagConstraints);

        beamTimePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        beamTimePanel.setBorder(new javax.swing.border.EtchedBorder());
        jLabel1.setText("Beam time");
        beamTimePanel.add(jLabel1);

        timeField.setColumns(5);
        beamTimePanel.add(timeField);

        jLabel2.setText("seconds");
        beamTimePanel.add(jLabel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        panel3.add(beamTimePanel, gridBagConstraints);

        controlButtonPanel.setLayout(new java.awt.GridBagLayout());

        plotButton.setText("Redraw");
        plotButton.setActionCommand("redraw");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        controlButtonPanel.add(plotButton, gridBagConstraints);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        controlButtonPanel.add(closeButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panel3.add(controlButtonPanel, gridBagConstraints);

        getContentPane().add(panel3, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void deselectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectButtonActionPerformed
        if ( tabPane.getSelectedComponent() == freqPane ) {
            setAllFreqs(false);
        }
        else if ( tabPane.getSelectedComponent() == bandPane ) {
            setAllBands(false);
        }
    }//GEN-LAST:event_deselectButtonActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        if ( tabPane.getSelectedComponent() == freqPane ) {
            setAllFreqs(true);
        }
        else if ( tabPane.getSelectedComponent() == bandPane ) {
            setAllBands(true);
        }
    }//GEN-LAST:event_selectButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    Runnable packIt = new Runnable() {
        public void run() { 
            synchronized(threadLock) {
                bandCheckPanel.removeAll();
                for(Iterator i=bands.iterator(); i.hasNext();) {
                    SelectionFrequencyBand e = (SelectionFrequencyBand) i.next();
                    if ( e.checkBox == null ) {
                        e.createCheckBox();
                    }
                    if ( e.count > 0 ) {
                        bandCheckPanel.add(e.getBox());
                    }
                }
            
                freqCheckPanel.removeAll();
                for( FrequencyEntry e : frequencies.values()) {
//                for(Iterator i=frequencies.keySet().iterator(); i.hasNext();) {
//                    FrequencyEntry e = frequencies.get(i.next());
                    if ( e.checkBox == null ) {
                        e.createCheckBox();
                    }
                    freqCheckPanel.add(e.getBox());
                }
            
                validateTree();
            }
        }
    };
    
    public synchronized void initBands(Site site) {
        if ( site instanceof SuperDarnBandSite ) {
            SuperDarnBandSite bandSite = (SuperDarnBandSite) site;
            FrequencyBand[] freqBands = bandSite.getBands();
            if ( freqBands.length > 0 ) {
                bands.clear();
                for(int i=0; i<freqBands.length; i++) {
                    FrequencyBand band = freqBands[i];
                    try {
                        SelectionFrequencyBand e = new SelectionFrequencyBand(band.getBand(), band.getLower(), band.getUpper());
                        bands.add(e);
                    }
                    catch(Exception e) {}
                }
                SwingUtilities.invokeLater(packIt);
            }
        }
    }
    
    public void setVisible(boolean vis) {
        super.setVisible(vis);
        if ( vis ) {
            this.toFront();
        }
    }

    public synchronized boolean isRestricted() {
        for( SelectionFrequencyBand e : bands ) {
//        for(Iterator i=bands.iterator(); i.hasNext();) {
//            SelectionFrequencyBand e = (SelectionFrequencyBand) i.next();
            if ( e.getBox() != null && e.getBox().isSelected() ) {
                return true;
            }
        }

        for( FrequencyEntry e : frequencies.values() ) {
//        for(Iterator i=frequencies.keySet().iterator(); i.hasNext();) {
//            FrequencyEntry e = (FrequencyEntry) frequencies.get(i.next());
            if ( e.getBox() != null && e.getBox().isSelected() ) {
                return true;
            }
        }

        return false;
    }

    public synchronized boolean isEnabled(short frequency) {

       for( SelectionFrequencyBand e : bands ) {
//       for(Iterator i=bands.iterator(); i.hasNext();) {
//            SelectionFrequencyBand e = (SelectionFrequencyBand) i.next();
            if ( frequency >= e.start && frequency <= e.stop && e.getBox() != null && e.getBox().isSelected() ) {
                return true;
            }
        }

        Integer freq = new Integer(frequency);

        FrequencyEntry entry = frequencies.get(freq);

        if ( entry != null ) {
            return (entry.getBox() != null && entry.getBox().isSelected());
        }
        
        return false;
        
    }

    public int getPlotWidth() {
        return ((Number) timeField.getValue()).intValue();
    }
    public void setPlotWidth(int seconds) {
        timeField.setValue(new Integer(seconds));
    }

    public synchronized void increment(short frequency) {
        Integer freq = new Integer(frequency);
        
        boolean needsPacking = false;

        FrequencyEntry oldEntry = frequencies.get(freq);

        if ( oldEntry != null ) {
            oldEntry.increment();
        }
        else {
                
            try {
                frequencies.put(freq, new FrequencyEntry(frequency));
                needsPacking = true;
            }
            catch(Exception e) {}
            
        }
        
        for( SelectionFrequencyBand band : bands ) {
//        for(Iterator i=bands.iterator(); i.hasNext();) {
//            SelectionFrequencyBand band = (SelectionFrequencyBand) i.next();
            if ( frequency >= band.start && frequency <= band.stop ) {
                if ( band.count == 0 ) {
                    needsPacking = true;
                }
                band.increment();
                break;
            }
        }
        if ( needsPacking ) {
            SwingUtilities.invokeLater(packIt);
        }
    }

    public synchronized void decrement(short frequency) {
        Integer freq = new Integer(frequency);

        FrequencyEntry oldEntry = frequencies.get(freq);
        
        boolean needsPacking = false;

        if ( oldEntry != null ) {
            oldEntry.decrement();
            if ( oldEntry.getCount() == 0 ) {
                frequencies.remove(freq);
                needsPacking = true;
            }
        }
        
        for( SelectionFrequencyBand band : bands ) {
//        for(Iterator i=bands.iterator(); i.hasNext();) {
//            SelectionFrequencyBand band = (SelectionFrequencyBand) i.next();
            if ( frequency >= band.start && frequency <= band.stop ) {
                if ( band.count > 0 ) {
                    needsPacking = true;
                }
                band.decrement();
                break;
            }
        }

        if ( needsPacking ) {
            SwingUtilities.invokeLater(packIt);
        }
    }

    private synchronized void setAllBands(boolean set) {
        for( SelectionFrequencyBand band : bands ) {
//        for(Iterator i=bands.iterator(); i.hasNext();) {
//            SelectionFrequencyBand e = (SelectionFrequencyBand) i.next();
            if ( band.getBox() != null ) {
                band.getBox().setSelected(set);
            }
        }
    }
    private synchronized void setAllFreqs(boolean set) {
        for( FrequencyEntry e : frequencies.values() ) {
//        for(Iterator i=frequencies.keySet().iterator(); i.hasNext();) {
//            FrequencyEntry e = (FrequencyEntry) frequencies.get(i.next());
            if ( e.getBox() != null ) {
                e.getBox().setSelected(set);
            }
        }
    }
//    private synchronized void setAll(boolean set) {
//        setAllFreqs(set);
//        setAllBands(set);
//    }
	

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bandCheckPanel;
    private javax.swing.JScrollPane bandPane;
    private javax.swing.JPanel beamTimePanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel controlButtonPanel;
    private javax.swing.JButton deselectButton;
    private javax.swing.JPanel freqCheckPanel;
    private javax.swing.JScrollPane freqPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel panel3;
    private javax.swing.JButton plotButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JPanel selectPanel;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JFormattedTextField timeField;
    // End of variables declaration//GEN-END:variables
    
}
