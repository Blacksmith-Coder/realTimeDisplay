/*
 * ControlPanel.java
 *
 * Created on 26 February 2008, 11:57
 */

package uk.ac.le.sppg.superdarn.realTimeControl;

import uk.ac.le.sppg.coords.Geographic;
import uk.ac.le.sppg.coords.proj.Projection;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Point;
import java.awt.Window;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Date;
import javax.swing.JOptionPane;
import uk.ac.le.sppg.superdarn.dataDisplay.PlotParameter;
import uk.ac.le.sppg.superdarn.fitData.ChannelId;

/**
 *
 * @author  nigel
 */
public class ControlPanel extends javax.swing.JFrame 
implements WindowListener {
    
    /** Creates new form ControlPanel */
    public ControlPanel() {
        initComponents();
    }

    void doTimePlot(String name, Date time, float duration, ChannelId channel, int beamNumber, 
            PlotParameter plotParameter, double limit, boolean groundScatter, boolean oldData, 
            int zoom, Dimension size, Point loc) 
    throws NoSuchFieldException, MalformedURLException, IOException {
        final String name2 = name;
        final Date time2 = time;
        final float duration2 = duration;
        final double limit2 = limit;
        final ChannelId channel2 = channel;
        final int beamNumber2 = beamNumber; 
        final PlotParameter plotParameter2 = plotParameter;
        final boolean groundScatter2 = groundScatter;
        final boolean oldData2 = oldData;
        final int zoom2 = zoom;
        final Dimension size2 = size;
        final Point loc2 = loc;
        
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.doTimePlot(name,time,duration,channel,beamNumber,plotParameter,
                    limit,groundScatter,oldData,zoom,size,loc);
        }
        else {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    try {
                        controlPanelBean.doTimePlot(name2,time2,duration2,channel2,beamNumber2,plotParameter2,
                            limit2,groundScatter2,oldData2,zoom2,size2,loc2);
                    } catch (NoSuchFieldException e) {
                        JOptionPane.showMessageDialog(null,
                                "Invalid data parameter for time window", "Internal Error",
                                JOptionPane.ERROR_MESSAGE);
                    } catch (MalformedURLException e) {
                        JOptionPane.showMessageDialog(null, e.getMessage(),
                                "Exception", JOptionPane.ERROR_MESSAGE);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, e.getMessage(),
                                "Exception", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
        }
    }
    
    void doFanPlot(String name, ChannelId channel, PlotParameter plotParameter, double limit, 
            boolean groundScatter, double scale, Dimension size, Point loc, Projection proj) 
    throws NoSuchFieldException, MalformedURLException, IOException, InterruptedException {
        final String name2 = name;
        final double limit2 = limit;
        final ChannelId channel2 = channel;
        final PlotParameter plotParameter2 = plotParameter;
        final boolean groundScatter2 = groundScatter;
        final double scale2 = scale;
        final Dimension size2 = size;
        final Point loc2 = loc;
        final Projection proj2 = proj;
        
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.doFanPlot(name,channel,plotParameter,
                    limit,groundScatter,scale,size,loc,proj);
        }
        else {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    try {
                        controlPanelBean.doFanPlot(name2,channel2,plotParameter2,
                            limit2,groundScatter2,scale2,size2,loc2,proj2);
                    } catch (NoSuchFieldException e) {
                        JOptionPane.showMessageDialog(null,
                                "Invalid data parameter for fan window", "Internal Error",
                                JOptionPane.ERROR_MESSAGE);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage(),
                                "Exception", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanelBean = new uk.ac.le.sppg.superdarn.dataDisplay.controlPanel.ControlPanelBean();
        controlPanelBean.setTimePlotDefaults(true,true,false,false,new Integer(5),1);
        controlPanelBean.setFanPlotDefaults(true,false,false);
        addWindowListener(controlPanelBean);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Real-time Control Panel");
        getContentPane().add(controlPanelBean, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private uk.ac.le.sppg.superdarn.dataDisplay.controlPanel.ControlPanelBean controlPanelBean;
    // End of variables declaration//GEN-END:variables

    public void setServer(URL url) {
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.setServer(url);
        }
        else {
            final URL copyUrl = url;
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    controlPanelBean.setServer(copyUrl);
                }
            });
        }
    }
    public void setFanCentre(Geographic geo) {
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.setFanCentre(geo);
        }
        else {
            final Geographic geoCopy = geo;
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    controlPanelBean.setFanCentre(geoCopy);
                }
            });
        }
    }

    public void setRadar(String site) 
    throws MalformedURLException, IOException {
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.setRadar(site);
        }
        else {
            final String siteCopy = site;
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    try {
                        controlPanelBean.setRadar(siteCopy);
                    } catch (MalformedURLException e) {
                        JOptionPane.showMessageDialog(null, e.getMessage(),
                                "Exception", JOptionPane.ERROR_MESSAGE);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, e.getMessage(),
                                "Exception", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
        }
    }

    public void setSiteChannel(String site, ChannelId channel) {
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.setSiteChannel(site, channel);
        }
        else {
            final String siteCopy = site;
            final ChannelId channelCopy = channel;
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    controlPanelBean.setSiteChannel(siteCopy, channelCopy);
                }
            });
        }
    }
    public void setTimePlotDefaults(boolean loadOldData, 
            boolean plotVel, boolean plotPow, boolean plotWidth,
            Integer beamNumber, int zoom) {
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.setTimePlotDefaults(loadOldData, plotVel, plotPow, plotWidth,
                                        beamNumber, zoom) ;
        }
        else {
            final boolean loadOldDataCopy = loadOldData;
            final boolean plotVelCopy = plotVel;
            final boolean plotPowCopy = plotPow;
            final boolean plotWidthCopy = plotWidth;
            final Integer beamNumberCopy = beamNumber;
            final int zoomCopy = zoom;
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    controlPanelBean.setTimePlotDefaults(loadOldDataCopy, plotVelCopy, plotPowCopy, plotWidthCopy,
                                                beamNumberCopy, zoomCopy) ;
                }
            });
        }
    }
    public void setTimePlotStart(int hour, int min, int sec, float duration ) {
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.setTimePlotStart(hour, min, sec, duration );
        }
        else {
            final int hourCopy = hour;
            final int minCopy = min;
            final int secCopy = sec;
            final float durationCopy = duration;
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    controlPanelBean.setTimePlotStart(hourCopy, minCopy, secCopy, durationCopy );
                }
            });
        }
    }
    public void setTimePlotDimensions(Point loc, Dimension dim) {
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.setTimePlotDimensions(loc, dim);
        }
        else {
            final Point locCopy = loc;
            final Dimension dimCopy = dim;
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    controlPanelBean.setTimePlotDimensions(locCopy , dimCopy );
                }
            });
        }
    }
    public void setFanPlotDimensions(Point loc, Dimension dim) {
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.setFanPlotDimensions(loc, dim);
        }
        else {
            final Point locCopy = loc;
            final Dimension dimCopy = dim;
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    controlPanelBean.setFanPlotDimensions(locCopy , dimCopy );
                }
            });
        }
    }
    public void setFanPlotDefaults(boolean plotVel, boolean plotPow, boolean plotWidth) {
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.setFanPlotDefaults(plotVel, plotPow, plotWidth);
        }
        else {
            final boolean plotVelCopy = plotVel;
            final boolean plotPowCopy = plotPow;
            final boolean plotWidthCopy = plotWidth;
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    controlPanelBean.setFanPlotDefaults(plotVelCopy, plotPowCopy, plotWidthCopy);
                }
            });
        }
    }
    public void doTimePlot() {
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.doTimePlot();
        }
        else {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    controlPanelBean.doTimePlot();
                }
            });
        }
    }
    public void doFanPlot() {
        if ( EventQueue.isDispatchThread()) {
            controlPanelBean.doFanPlot();
        }
        else {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    controlPanelBean.doFanPlot();
                }
            });
        }
    }
    
    public void windowClosing(WindowEvent e) {
        Window w = e.getWindow();

    }
    public void windowClosed(WindowEvent e) {
    }
    
    public void windowIconified(WindowEvent e) {
    }
    
    public void windowDeiconified(WindowEvent e) {
    }
    
    public void windowOpened(WindowEvent e) {
    }
    
    public void windowActivated(WindowEvent e) {
    }
    
    public void windowDeactivated(WindowEvent e) {
    }
    

}
